#!/usr/bin/python
# -*- coding: utf-8 -*-

"""mailpy

Author: Lucas Pimentel Lellis (lucaslellis [at] gmail [dot] com)
Description: A simple command-line interface mail sender.
             To use the sendmail function as a module in
             another program, just import mailpylib.py

Copyright 2013 Lucas Pimentel Lellis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

from optparse import OptionParser
import getpass
import socket
import sys

from mailpylib import sendmail


SEPARATOR = ","
DEFAULT_MTA = "localhost"

def process_options():
    usage = ("Usage: %prog [options] recipients\n"
             "       %prog -h")
    parser = OptionParser(usage)
    parser.add_option("-a", "--attachments", dest="attachments",
                      help="Comma-separated list of message's ATTACHMENTS")
    parser.add_option("-f", "--from", dest="sender",
                      help="Message's SENDER - defaults to username@hostname")
    parser.add_option("-m", "--mta", dest="mta",
                      help="MTA (SMTP Server) to be used - defaults to %s" % DEFAULT_MTA, default=DEFAULT_MTA)
    parser.add_option("-s", "--subject", dest="subject",
                      help="Message's SUBJECT - MANDATORY")
    parser.add_option("-t", dest="html", action="store_true", default=False,
                      help="Message's body is in HTML format")

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.error("incorrect number of arguments")

    errors = False
    optional_args = ["attachments", "mta", "sender"]
    for key, value in options.__dict__.items():
        if (not key in optional_args) and (value is None):
            errors = True
            break

    if errors:
        parser.error("Missing option(s)")

    return options


def main(argv=None):
    if argv is None:
        argv = sys.argv

        options = process_options()

        if options.sender is None:
            username = getpass.getuser()
            hostname = socket.gethostname()
            options.sender = "%s@%s" % (username, hostname)

        rec_list = argv[-1].split(SEPARATOR)

        if options.attachments:
            attach_list = options.attachments.split(SEPARATOR)
        else:
            attach_list = None

        body = sys.stdin.read()

        sendmail(body, options.sender, rec_list, options.mta, options.subject, attach_list, options.html)


if __name__ == "__main__":
    sys.exit(main())
